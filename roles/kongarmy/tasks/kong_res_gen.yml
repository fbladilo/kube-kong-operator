---
- set_fact:
    kong_requested_resource:
      kind: "{{ kong_resource.get('kind', 'kindNotFound') | string | lower }}"
      count: "{{ kong_resource.get('count', 1) | int }}"
      definition: "{{ kong_resource.get('definition', {}) }}"

- when:
  - kong_requested_resource.definition == {}
  set_fact:
    requested_resource_supported: "{{ kong_requested_resource.kind in supported_resources.keys() }}"

- when:
  - kong_requested_resource.definition == {}
  - not requested_resource_supported|bool
  debug:
    msg: "Requested resource {{ kong_requested_resource.kind }} not a part of default KongArmy. Please specify a definition field."

- when:
  - kong_requested_resource.definition == {}
  - requested_resource_supported|bool
  ignore_errors: true
  name: "Checking whether current resource exists"
  k8s_facts:
    kind: "{{ kong_requested_resource.kind }}"
    namespace: "{{ meta.namespace }}"
    api_version: "{{ supported_resources[kong_requested_resource.kind.apiVersion] }}"
  register: resource_discovery_results

- when:
  - kong_requested_resource.definition != {}
  ignore_errors: true
  name: "Checking whether current resource exists"
  k8s_facts:
    kind: "{{ kong_requested_resource.kind }}"
    namespace: "{{ meta.namespace }}"
    api_version: "{{ kong_requested_resource.definition.apiVersion }}"
  register: resource_discovery_results

- when:
  - (resource_discovery_results.resources | d([]) | length | int) < (kong_requested_resource.count | int)
  ignore_errors: true
  block:
  - name: "Generating resources"
    vars:
      kong_metadata: 
        metadata:
          namespace: "{{ meta.namespace }}"
      range_start: 0
      resource_definition: "{{ kong_requested_resource.definition if kong_requested_resource.definition != {} 
        else supported_resources[kong_requested_resource.kind] }}"
    k8s:
      state: present
      definition: "{{ lookup('template', 'manifest.yml.j2') }}"
    register: resource_generation_results